<?php

/**
 * This is the model class for table "{{pw_costs_box}}".
 *
 * The followings are the available columns in table '{{pw_costs_box}}':
 * @property integer $id
 * @property integer $cost_id
 * @property string $name
 * @property string $equipment_name
 * @property string $equipment_description
 * @property integer $chance
 * @property integer $cost
 * @property string $currency
 * @property int $weight
 *
 * @property PwCostsContent[] $contents
 * @property PwCosts $tarif
 */
class PwCostsBox extends MLModel
{
	const EQUIPMENT_CLASSNAME = 'BoxDonate';
	const IMG_PATH = '/img/bonus-box/';

	var $image;
	var $image_full;

	public $MLFields = ['equipment_name', 'equipment_description'];
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return 'rev_pw_costs_box';
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('cost_id, name', 'required'),
			array('cost_id, chance, cost, weight', 'numerical', 'integerOnly'=>true),
			array('name', 'length', 'max'=>255),
			array('currency', 'length', 'max'=>1),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('id, cost_id, name, chance, image, image_full', 'safe'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
			'contents' => array(self::HAS_MANY, 'PwCostsContent', 'box_id', 'order'=>'contents.chance ASC'),
			'tarif'    => array(self::HAS_ONE, 'PwCosts', array('id' => 'cost_id')),
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'id' => 'ID',
			'cost_id' => 'ID цены',
			'name' => 'Внутреннее название ящика',
			'chance' => 'Шанс выпадания',
			'equipment_name' => 'Название ящика в инвентаре',
			'equipment_description' => 'Описание ящика в инвентаре',
			'cost' => 'Стоимость',
			'currency' => 'Валюта',
			'weight' => 'Вес',
			'image' => 'Картинка (инвертарная)',
			'image_full' => 'Картинка (увеличенная)',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('id',$this->id);
		$criteria->compare('cost_id',$this->cost_id);
		$criteria->compare('name',$this->name,true);
		$criteria->compare('chance',$this->chance);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return PwCostsBox the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	public function afterSave(){
		parent::afterSave();
		if ($this->image) {
			$uploader = CUploadedFile::getInstance($this,'image');
			if ($uploader){
				$uploader->saveAs(basedir.self::IMG_PATH. $this->id.'.png');
			}
		}

		if ($this->image_full) {
			$uploader_full = CUploadedFile::getInstance($this,'image_full');
			if ($uploader_full){
				$uploader_full->saveAs(basedir.self::IMG_PATH. $this->id.'_full.png');
			}
		}
	}

	public function getImageAbsolutePath(){
		return basedir.$this->getImageUrl();
	}

	public function getImageUrl(){
		if (file_exists(basedir.PwCostsBox::IMG_PATH.$this->id.'.png')){
			return PwCostsBox::IMG_PATH.$this->id.'.png';
		} else return '/images/donatebox.png';
	}

	public function getImageFullAbsolutePath(){
		return basedir.$this->getImageFullUrl();
	}

	public function getImageFullUrl(){
		if (file_exists(basedir.PwCostsBox::IMG_PATH.$this->id.'_full.png')){
			return PwCostsBox::IMG_PATH.$this->id.'_full.png';
		} else return '/images/donatebox.png';
	}

	public function beforeDelete() {
		foreach ($this->contents as $one) $one->delete();
		return parent::beforeDelete(); // TODO: Change the autogenerated stub
	}

	public function getEquipment(){
		$params = CJSON::encode([ 'box_id' => $this->id ]);

		$equipment = Equipment::model()->findByAttributes([
			'className' => PwCostsBox::EQUIPMENT_CLASSNAME,
			'params'    => $params
		]);

		if (!$equipment) {
			$equipment = new Equipment();
			$equipment->className = PwCostsBox::EQUIPMENT_CLASSNAME;
			$equipment->params = $params;
			$equipment->type = Equipment::TYPE_BOX;
			$equipment->status = 'U';
			$equipment->class = 'S';
			$equipment->uname = 'ml';
			$equipment->toxic = 0;
			$equipment->is_caves_drop = 0;
		}
		$equipment->cost = $this->cost;
		$equipment->mtype = $this->currency;
		$equipment->weight = $this->weight;
		$equipment->name = $this->equipment_name;
		$equipment->opis = $this->equipment_description;

		if (!$equipment->save()){
			var_dump($equipment->getErrors());
		}

		$equipment->setAttributeFromModel('name', $this, 'equipment_name');
		$equipment->setAttributeFromModel('opis', $this, 'equipment_description');

		copy($this->getImageAbsolutePath(), basedir.$equipment->getImagePath(Equipment::IMAGE_SMALL));
		copy($this->getImageFullAbsolutePath(), basedir.$equipment->getImagePath(Equipment::IMAGE_ORIGINAL_FULL));

		return Equipment::model()->findByPk($equipment->id);
	}
}
