<?php

/**
 * This is the model class for table "{{nkr_events}}".
 *
 * The followings are the available columns in table '{{nkr_events}}':
 * @property string $event_id
 * @property string $name
 * @property string $date_begin
 * @property string $date_end
 * @property int $news_id
 *
 * @property NkrPrices[] $prices
 * @property RNews $news
 */
class NkrEvents extends CActiveRecord
{
	const CACHE_SLUG = 'nkr__getCurrentEvent';
	/**
	 * @return string the associated database table name
	 */
	public function tableName()
	{
		return '{{nkr_events}}';
	}

	public function init(){
		Yii::app()->getModule('material');
		parent::init();
	}

	/**
	 * @return array validation rules for model attributes.
	 */
	public function rules()
	{
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array(
			array('name, date_begin, date_end', 'required'),
			array('name', 'length', 'max'=>255),
			array('news_id', 'numerical', 'integerOnly'=>true),
			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array('event_id, name, date_begin, date_end, news_id', 'safe', 'on'=>'search'),
		);
	}

	/**
	 * @return array relational rules.
	 */
	public function relations()
	{
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array(
			'prices' => array(self::HAS_MANY, 'NkrPrices', 'event_id', 'order'=>'prices.sum ASC'),
			'news' => array(self::HAS_ONE, 'RNews', array('id' => 'news_id')),
		);
	}

	/**
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		return array(
			'event_id' => 'ID ивента',
			'name' => 'Название ивента',
			'date_begin' => 'Дата начала ивента',
			'date_end' => 'Дата конца ивента',
			'news_id' => 'ID новости',
		);
	}

	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 * based on the search/filter conditions.
	 */
	public function search()
	{
		// @todo Please modify the following code to remove attributes that should not be searched.

		$criteria=new CDbCriteria;

		$criteria->compare('event_id',$this->event_id,true);
		$criteria->compare('name',$this->name,true);
		$criteria->compare('date_begin',$this->date_begin,true);
		$criteria->compare('date_end',$this->date_end,true);

		return new CActiveDataProvider($this, array(
			'criteria'=>$criteria,
		));
	}

	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 * @param string $className active record class name.
	 * @return NkrEvents the static model class
	 */
	public static function model($className=__CLASS__)
	{
		return parent::model($className);
	}

	public function beforeSave() {
		Yii::app()->cache->delete(self::CACHE_SLUG);
		return parent::beforeSave(); // TODO: Change the autogenerated stub
	}

	public function beforeDelete() {
		Yii::app()->cache->delete(self::CACHE_SLUG);
		foreach ($this->prices as $one) $one->delete();
		return parent::beforeDelete(); // TODO: Change the autogenerated stub
	}

	public function getMaxDollarsCount(){
		$query = "SELECT COALESCE(sum(`sum`), 0) `sum` FROM rev_nkr_prices WHERE event_id = {$this->event_id}";
		return Yii::app()->db->createCommand($query)->queryScalar();
	}
	public static function getCurrentEvent(){
		$model = Yii::app()->cache->get(self::CACHE_SLUG);
		if (!$model) {
			$criteria = new CDbCriteria();
			$criteria->addCondition("date_begin <= NOW()");
			$criteria->addCondition("date_end >= NOW()");
			$criteria->limit = 1;
			$model = self::model()->find($criteria);
			// 10 minutes cache
			Yii::app()->cache->set(self::CACHE_SLUG, $model, 10*60);
		}
		return $model;
	}
}
